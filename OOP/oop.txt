This section is about object oriented programming in python

OOP applies to other languages - Java, C++, etc. 
OOP concepts the same, different syntax 

OOP - interaction of objects in a programs


Integer Class - is a class for the integers. 
Class defines how objects can interact in a program.
Try adding Integer class w/ a String class, get an error (cannot add integer to string)

String class has a method called upper() it cannot work on String.

Function class - Functions are objects - a function is an instance of the Function class

What is a class? 
a blueprint that defines how an instance of itself can behave in a program
Ex. "hello" is an instance of the String class, I can run method "hello".upper() 


What is an instance? 
existance of an object of a specific class 

Car class has an instance (object) called mercedes 

What is a method? 
function that acts on an instance of a class 
Ex. .lower from String class, acts on an instance (word) of the string class

Data Type Classes:
all data types in python are an instance of a data type class
Ex. Integer, Boolean, List, Dictionary, Set, Float are all classes with methods (that act on specific instances)

# Classes - blueprints for objects (attributes / methods) 
# Class becomes a new datatype in program
# Purpose of Classes:

# encapsulate common behavior between instance of an object 
# grouping related behavior together in a class

# Class Naming Convention
# use PascalCase
# PEP-8 (python style guide) says use PascalCase when naming classes in python programs


# Class Constructor 
# __init__ method -> auto called upon instantiation, instance attributes set in constructor using self keyword
# self parameter - references instance of class

# Instance Attributes
# Data associated with an instance of an object
# create new instance attribute using self.attribute = attribute 

# Class Attributes
# data associated with a class, shared by all instances of a class 

# properties 
# allow us to enforce specific behavior when accessing / modifying attributes (get / set)

# private attribute
# data (attribute) that can only be modified from within the class (using a method)
# self._salary - using an underscore denotes private (however, it's not actually enforced in the syntax) just a convention
# use a setter method to set salary 


# Instances Methods
# functions defined inside a class, that act on instances of the class
# can access attributes associated with specific instance
# ex. constructor def __init__(self)
# always need "self" (hidden parameter) as first parameter in instance method func definition

Class method 
associated with class, doesn't have access to instance attributes, not associated with instances

# class attributes - associated directly with class, don't use "self" keyword
# class method - use @classmethod decorator and pass cls as first arg, can only access class attribute


# Static Methods
# A method inside a class, doesn't have access to "cls" or "self" keyword
# function that belongs to class, organize related code, utility code inside specific classes
# many classes don't initialize, just contain static methods 
# should work independtly of any other attributes (technically can access instance/class methods but DONT)
